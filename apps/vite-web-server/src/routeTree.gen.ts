/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as ProjectsImport } from './routes/projects'
import { Route as HelpImport } from './routes/help'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsProjectIdImport } from './routes/projects.$projectId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const HelpRoute = HelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => ProjectsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof ProjectsImport
    }
  }
}

// Create and export the route tree

interface ProjectsRouteChildren {
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/help': typeof HelpRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/help': typeof HelpRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/help': typeof HelpRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/help'
    | '/projects'
    | '/settings'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/help'
    | '/projects'
    | '/settings'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/help'
    | '/projects'
    | '/settings'
    | '/projects/$projectId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  HelpRoute: typeof HelpRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  HelpRoute: HelpRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  SettingsRoute: SettingsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/help",
        "/projects",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/help": {
      "filePath": "help.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx",
      "children": [
        "/projects/$projectId"
      ]
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects.$projectId.tsx",
      "parent": "/projects"
    }
  }
}
ROUTE_MANIFEST_END */
